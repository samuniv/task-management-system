@using BlazorWasm.Client.Services
@inject IThemeService ThemeService
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<button type="button" 
        class="btn btn-outline-secondary theme-toggle-button @(GetActiveClass())"
        @onclick="ToggleTheme"
        aria-pressed="@GetAriaPressed()"
        aria-label="@GetAriaLabel()"
        title="@GetTooltip()">
    
    @if (IsLoading)
    {
        <div class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true">
            <span class="visually-hidden">@LocalizationService.GetString("Message.Loading")</span>
        </div>
    }
    else
    {
        <i class="fas @GetIconClass() me-1" aria-hidden="true"></i>
    }
    
    @if (ShowText)
    {
        <span class="button-text">@GetButtonText()</span>
    }
    
    @if (ShowKeyboardShortcut)
    {
        <span class="keyboard-shortcut ms-1">
            <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>T</kbd>
        </span>
    }
</button>

@code {
    [Parameter] public bool ShowText { get; set; } = true;
    [Parameter] public bool ShowKeyboardShortcut { get; set; } = false;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public EventCallback<string> OnThemeChanged { get; set; }

    private string CurrentTheme { get; set; } = "auto";
    private string EffectiveTheme { get; set; } = "light";
    private bool IsLoading { get; set; } = false;

    private readonly Dictionary<string, ThemeInfo> _themeInfo = new()
    {
        { "auto", new ThemeInfo("Auto", "fa-circle-half-stroke", "Follow system preference") },
        { "light", new ThemeInfo("Light", "fa-sun", "Light theme") },
        { "dark", new ThemeInfo("Dark", "fa-moon", "Dark theme") },
        { "high-contrast", new ThemeInfo("High Contrast", "fa-adjust", "High contrast for accessibility") }
    };

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to theme changes
        ThemeService.ThemeChanged += OnThemeServiceChanged;
        
        // Get initial theme state
        await UpdateThemeState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize theme service if not already done
            await ThemeService.InitializeThemeAsync();
            await UpdateThemeState();
        }
    }

    private async Task ToggleTheme()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            await ThemeService.ToggleThemeAsync();
            await UpdateThemeState();
            
            // Notify parent component
            if (OnThemeChanged.HasDelegate)
            {
                await OnThemeChanged.InvokeAsync(CurrentTheme);
            }
        }
        catch (Exception ex)
        {
            // Log error (in a real app, you might want to show a notification)
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateThemeState()
    {
        try
        {
            CurrentTheme = await ThemeService.GetCurrentThemeAsync();
            EffectiveTheme = await ThemeService.GetEffectiveThemeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating theme state: {ex.Message}");
        }
    }

    private void OnThemeServiceChanged(object? sender, string theme)
    {
        InvokeAsync(async () =>
        {
            await UpdateThemeState();
        });
    }

    private string GetButtonText()
    {
        if (_themeInfo.TryGetValue(CurrentTheme, out var themeInfo))
        {
            return themeInfo.Label;
        }
        return "Theme";
    }

    private string GetIconClass()
    {
        if (_themeInfo.TryGetValue(CurrentTheme, out var themeInfo))
        {
            return themeInfo.Icon;
        }
        return "fa-circle";
    }

    private string GetAriaLabel()
    {
        var currentLabel = _themeInfo.TryGetValue(CurrentTheme, out var themeInfo) ? themeInfo.Label : "Unknown";
        return $"Current theme: {currentLabel}. Click to change theme.";
    }

    private string GetTooltip()
    {
        var currentDescription = _themeInfo.TryGetValue(CurrentTheme, out var themeInfo) ? themeInfo.Description : "Unknown theme";
        var tooltip = $"Theme: {currentDescription}";
        
        if (CurrentTheme == "auto")
        {
            var effectiveLabel = _themeInfo.TryGetValue(EffectiveTheme, out var effectiveInfo) ? effectiveInfo.Label : EffectiveTheme;
            tooltip += $" (Currently: {effectiveLabel})";
        }
        
        if (ShowKeyboardShortcut)
        {
            tooltip += " (Ctrl+Alt+T)";
        }
        
        return tooltip;
    }

    private string GetAriaPressed()
    {
        // Consider non-light themes as "pressed" state
        return (EffectiveTheme != "light").ToString().ToLower();
    }

    private string GetActiveClass()
    {
        // Show active state when not using light theme
        return EffectiveTheme != "light" ? "active" : "";
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeServiceChanged;
    }

    private record ThemeInfo(string Label, string Icon, string Description);
}
