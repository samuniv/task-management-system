@using BlazorWasm.Client.Services
@inject IThemeService ThemeService
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<button type="button" 
        class="btn btn-outline-secondary theme-toggle-button @(IsHighContrast ? "active" : "")"
        @onclick="ToggleTheme"
        aria-pressed="@IsHighContrast.ToString().ToLower()"
        aria-label="@GetAriaLabel()"
        title="@GetTooltip()">
    
    @if (IsLoading)
    {
        <div class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true">
            <span class="visually-hidden">@LocalizationService.GetString("Message.Loading")</span>
        </div>
    }
    else
    {
        <i class="fas @GetIconClass() me-1" aria-hidden="true"></i>
    }
    
    @if (ShowText)
    {
        <span class="button-text">@GetButtonText()</span>
    }
    
    @if (ShowKeyboardShortcut)
    {
        <span class="keyboard-shortcut ms-1">
            <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>H</kbd>
        </span>
    }
</button>

@code {
    [Parameter] public bool ShowText { get; set; } = true;
    [Parameter] public bool ShowKeyboardShortcut { get; set; } = false;
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public EventCallback<string> OnThemeChanged { get; set; }

    private bool IsHighContrast { get; set; } = false;
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to theme changes
        ThemeService.ThemeChanged += OnThemeServiceChanged;
        
        // Get initial theme state
        await UpdateThemeState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize theme service if not already done
            await ThemeService.InitializeThemeAsync();
            await UpdateThemeState();
        }
    }

    private async Task ToggleTheme()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            await ThemeService.ToggleHighContrastAsync();
            await UpdateThemeState();
            
            // Notify parent component
            if (OnThemeChanged.HasDelegate)
            {
                var currentTheme = await ThemeService.GetCurrentThemeAsync();
                await OnThemeChanged.InvokeAsync(currentTheme);
            }
        }
        catch (Exception ex)
        {
            // Log error (in a real app, you might want to show a notification)
            Console.WriteLine($"Error toggling theme: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateThemeState()
    {
        try
        {
            IsHighContrast = await ThemeService.IsHighContrastActiveAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating theme state: {ex.Message}");
        }
    }

    private void OnThemeServiceChanged(object? sender, string theme)
    {
        InvokeAsync(async () =>
        {
            await UpdateThemeState();
        });
    }

    private string GetButtonText()
    {
        return IsHighContrast 
            ? LocalizationService.GetString("Accessibility.DefaultTheme") 
            : LocalizationService.GetString("Accessibility.HighContrast");
    }

    private string GetIconClass()
    {
        return IsHighContrast ? "fa-sun" : "fa-adjust";
    }

    private string GetAriaLabel()
    {
        return IsHighContrast 
            ? LocalizationService.GetString("Accessibility.SwitchToDefaultTheme")
            : LocalizationService.GetString("Accessibility.SwitchToHighContrast");
    }

    private string GetTooltip()
    {
        var baseTooltip = IsHighContrast 
            ? LocalizationService.GetString("Accessibility.SwitchToDefaultTheme")
            : LocalizationService.GetString("Accessibility.SwitchToHighContrast");
        
        if (ShowKeyboardShortcut)
        {
            baseTooltip += " (Ctrl+Alt+H)";
        }
        
        return baseTooltip;
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeServiceChanged;
    }
}
